module.exports={
    template:Bue.html`
      <div>
      <p>
      首先说明一下本发明要解决的问题：

本发明本质上来说，只为了解决一个问题而存在：

在接手一个不是自己从头参与开发的前后端分离的web前端单页面应用程序时，尽可能不需要阅读别人的代码以及熟悉代码结构即可快速完成目标功能。

而这个问题具备非常非常重大的实际意义，因为经常会有开发者抱怨某某项目维护起来太困难，其本质原因在于这么说的人都只有一个思维：更改某个功能的代码必须找到原有点代码。而实际上，javascript作为一个无比灵活的语言，绝大多数时候这个推论都是不成立的。尽管这个推论在其它绝大多数编程语言里可能是成立的。

只不过，在为了帮助使用者完成该功能时提供良好的开发体验，本框架也内置了一些其他的相对比较有必要的功能。

同时，本发明在解决这个本质问题的同时，也是可以从0到1开发一个前后端分离的web前端单页面应用程序的。



在此阐述一下本发明由来的缘由：
1 市面上大部分web应用程序都属于中小型，就算存在大型应用，也会有极大的概率拆分成为很多中小型的，通过微服务等方式集成到一起。

2	绝大部分公司的绝大部分应用程序，到一定事件了都会选择重构；或者新的一批程序员接手了别人留下来的项目和代码，极大的概率会明面或者暗地的吐槽别人代码的不好，甚至有重构的想法。这就是典型的程序员思维。而重构是否在领导和公司看来有巨大的经济效益，是否可以给重构者带来更多的效益，是否会存在损失掉因为重构而无法进行其它开发工作的机会成本等等。如果不重构，更改现有功能，接手者是否需要阅读别人的代码，接手者是否愿意阅读别人代码，接手者在阅读他人代码时候是否存在抵触心理。

3	假如完全抛开程序员思维，完全站在非技术决策者的角度看问题，在用户体验完全一致的情况下，技术人员采用什么样的框架，可能是一个无关紧要的问题。

4	多数程序员选择框架的时候只会使用一种框架作为唯一的一个框架，如果是从0到1开发一个项目，那么这种做法无疑是几乎完全正确的。但是多数时候，我们都会接手已经存在的项目，去添加新功能和优化现有功能，按照常规的手段，我们要找到对应的代码，然后修改。但其实，我们可以利用一种补丁的思维，写n段新的代码，放进去系统里，不用改任何既有代码去达到我们的目的。此方法虽然可能会让一些强迫症或者代码洁癖者感觉难受，但在应对上述2中所说的情况多数时候都是灵丹妙药，特别是工期紧你又无暇对原有东西深入分析的时候。


因此，综合以上几点，Hacker.js定义为一个可以与任何web前端框架协作共用进行开发的企业级开发框架。其具备以下特点：

1 小而美：绝对不会像angular一样贪多，啥都想自己定义。框架的使命就是为了与更优秀的组件一起使用灵活搭配，用最少的时间干出同样的事情

2 麻雀虽小五脏比较全：整个框架目前只有5000行左右的代码，相当于vue框架源码行数的四分之一。但是提供对路由和数据仓库的支持，以及用于处理视图的内置指令，这三者构成了一个开发中大型企业级web应用的最小单位。

3 声明式的api设计:就像一个比较开放的填空题一样，按照框架推崇的套路去进行开发工作，就会倍感简单。

4 无破坏性：使用本框架搭配任何的web前端框架一起使用，都不会破坏原有框架工作的正确性。

5 无需构建：因为本框架未使用typescript之类的强类型语言编写，使用的是原生javascript编写，且现在的浏览器对于es6支持都已经非常良好了，因此抛弃了构建这种和应用程序开发的主体关系不大的操作，让开发者更加专注于应用程序逻辑本身的编写。

6 首屏加载高性能：由于本框架的体积包很小，而且框架自身被引入后所做的初始化工作也很少，同时也没有react之类的虚拟dom比对过程，因此浏览器第一次加载应用程序时加载速度极快。

7 快速集成第三方示例组件：一个成熟的第三方组件提供的示例组件，通常都是一个可以运行的网页。如果你的应用程序需要集成这个第三方组件，通常都方式都是将这个第三方网页里的各个部分拆解出对应代码放到现有的程序里，这个过程非常容易出错，尤其涉及一些复杂点儿的第三方组件，也非常容易产生代码冲突和样式冲突。本框架通过iframe的形式进行第三方组件的加载，且提供合理的通讯机制，让使用者达到快速集成示例组件的目的。
      </p>
    </div>
    </div>
    `
  }